package tech.projectmatris.antimalwareapp.utils;

import android.annotation.SuppressLint;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.Signature;
import android.os.Build;

import androidx.annotation.NonNull;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;

/**
 * Utility SHA256 Hash Extractor class for use in multiple locations
 */
public class Sha256HashExtractor {

    /**
     * Get the list of Signatures used by the application
     */
    public static List<String> getSignatures(@NonNull PackageManager pm, @NonNull String packageName) {
        try {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
                PackageInfo packageInfo = pm.getPackageInfo(packageName, PackageManager.GET_SIGNING_CERTIFICATES);
                if (packageInfo == null || packageInfo.signingInfo == null) {
                    return null;
                }
                if (packageInfo.signingInfo.hasMultipleSigners()) {
                    return convertSignaturesToStrings(packageInfo.signingInfo.getApkContentsSigners());
                } else {
                    return convertSignaturesToStrings(packageInfo.signingInfo.getSigningCertificateHistory());
                }
            } else {
                @SuppressLint("PackageManagerGetSignatures")
                PackageInfo packageInfo = pm.getPackageInfo(packageName, PackageManager.GET_SIGNATURES);
                if (packageInfo == null || packageInfo.signatures == null || packageInfo.signatures.length == 0 || packageInfo.signatures[0] == null) {
                    return null;
                }
                return convertSignaturesToStrings(packageInfo.signatures);
            }
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
            return null;
        }
    }

    private static List<String> convertSignaturesToStrings(Signature[] signatures) {
        List<String> signaturesList = new ArrayList<>();
        for (Signature signature: signatures) {
            if (signature != null) {
                signaturesList.add(getDigestedSignature(signature));
            }
        }
        return signaturesList;
    }

    private static String getDigestedSignature(Signature signature) {
        byte[] signatureArray = signature.toByteArray();
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] digest = md.digest(signatureArray);
            return bytesToHexString(digest);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }

    private static String bytesToHexString(byte[] bytes) {
        StringBuilder sb = new StringBuilder();
        for (byte aByte: bytes) {
            String hex = Integer.toHexString(0xFF & aByte);
            if (hex.length() == 1) {
                sb.append('0');
            }
            sb.append(hex);
        }
        return sb.toString();
    }
}
